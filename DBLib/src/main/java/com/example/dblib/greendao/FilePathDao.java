package com.example.dblib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dblib.bean.FilePath;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_PATH".
*/
public class FilePathDao extends AbstractDao<FilePath, Void> {

    public static final String TABLENAME = "FILE_PATH";

    /**
     * Properties of entity FilePath.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property ParentalPath = new Property(2, String.class, "parentalPath", false, "PARENTAL_PATH");
        public final static Property IsDir = new Property(3, int.class, "isDir", false, "IS_DIR");
        public final static Property Last_md = new Property(4, long.class, "last_md", false, "LAST_MD");
    }


    public FilePathDao(DaoConfig config) {
        super(config);
    }
    
    public FilePathDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_PATH\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"PATH\" TEXT," + // 1: path
                "\"PARENTAL_PATH\" TEXT," + // 2: parentalPath
                "\"IS_DIR\" INTEGER NOT NULL ," + // 3: isDir
                "\"LAST_MD\" INTEGER NOT NULL );"); // 4: last_md
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_PATH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FilePath entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String parentalPath = entity.getParentalPath();
        if (parentalPath != null) {
            stmt.bindString(3, parentalPath);
        }
        stmt.bindLong(4, entity.getIsDir());
        stmt.bindLong(5, entity.getLast_md());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FilePath entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String parentalPath = entity.getParentalPath();
        if (parentalPath != null) {
            stmt.bindString(3, parentalPath);
        }
        stmt.bindLong(4, entity.getIsDir());
        stmt.bindLong(5, entity.getLast_md());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FilePath readEntity(Cursor cursor, int offset) {
        FilePath entity = new FilePath( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentalPath
            cursor.getInt(offset + 3), // isDir
            cursor.getLong(offset + 4) // last_md
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FilePath entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentalPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsDir(cursor.getInt(offset + 3));
        entity.setLast_md(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FilePath entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FilePath entity) {
        return null;
    }

    @Override
    public boolean hasKey(FilePath entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
